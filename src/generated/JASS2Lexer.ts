// Generated from src/JASS2.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class JASS2Lexer extends Lexer {
	public static readonly RAWVAL = 1;
	public static readonly STRING = 2;
	public static readonly AND = 3;
	public static readonly ARRAY = 4;
	public static readonly CALL = 5;
	public static readonly CONSTANT = 6;
	public static readonly DEBUG = 7;
	public static readonly ELSE = 8;
	public static readonly ELSEIF = 9;
	public static readonly ENDFUNCTION = 10;
	public static readonly ENDIF = 11;
	public static readonly ENDLOOP = 12;
	public static readonly ENDGLOBALS = 13;
	public static readonly EXTENDS = 14;
	public static readonly EXITWHEN = 15;
	public static readonly FALSE = 16;
	public static readonly FUNCTION = 17;
	public static readonly GLOBALS = 18;
	public static readonly IF = 19;
	public static readonly LOCAL = 20;
	public static readonly LOOP = 21;
	public static readonly NATIVE = 22;
	public static readonly NOT = 23;
	public static readonly NOTHING = 24;
	public static readonly NULL = 25;
	public static readonly OR = 26;
	public static readonly RETURNS = 27;
	public static readonly RETURN = 28;
	public static readonly SET = 29;
	public static readonly TAKES = 30;
	public static readonly THEN = 31;
	public static readonly TRUE = 32;
	public static readonly TYPE = 33;
	public static readonly COMMA = 34;
	public static readonly EQ_EQ = 35;
	public static readonly EQ = 36;
	public static readonly NEQ = 37;
	public static readonly LT_EQ = 38;
	public static readonly LT = 39;
	public static readonly GT_EQ = 40;
	public static readonly GT = 41;
	public static readonly PLUS = 42;
	public static readonly MINUS = 43;
	public static readonly MUL = 44;
	public static readonly DIV = 45;
	public static readonly LPAREN = 46;
	public static readonly RPAREN = 47;
	public static readonly LBRACK = 48;
	public static readonly RBRACK = 49;
	public static readonly ID = 50;
	public static readonly INTVAL = 51;
	public static readonly HEXVAL = 52;
	public static readonly REALVAL = 53;
	public static readonly WS = 54;
	public static readonly NL = 55;
	public static readonly LINE_COMMENT = 56;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, "'and'", 
                                                            "'array'", "'call'", 
                                                            "'constant'", 
                                                            "'debug'", "'else'", 
                                                            "'elseif'", 
                                                            "'endfunction'", 
                                                            "'endif'", "'endloop'", 
                                                            "'endglobals'", 
                                                            "'extends'", 
                                                            "'exitwhen'", 
                                                            "'false'", "'function'", 
                                                            "'globals'", 
                                                            "'if'", "'local'", 
                                                            "'loop'", "'native'", 
                                                            "'not'", "'nothing'", 
                                                            "'null'", "'or'", 
                                                            "'returns'", 
                                                            "'return'", 
                                                            "'set'", "'takes'", 
                                                            "'then'", "'true'", 
                                                            "'type'", "','", 
                                                            "'=='", "'='", 
                                                            "'!='", "'<='", 
                                                            "'<'", "'>='", 
                                                            "'>'", "'+'", 
                                                            "'-'", "'*'", 
                                                            "'/'", "'('", 
                                                            "')'", "'['", 
                                                            "']'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "RAWVAL", 
                                                             "STRING", "AND", 
                                                             "ARRAY", "CALL", 
                                                             "CONSTANT", 
                                                             "DEBUG", "ELSE", 
                                                             "ELSEIF", "ENDFUNCTION", 
                                                             "ENDIF", "ENDLOOP", 
                                                             "ENDGLOBALS", 
                                                             "EXTENDS", 
                                                             "EXITWHEN", 
                                                             "FALSE", "FUNCTION", 
                                                             "GLOBALS", 
                                                             "IF", "LOCAL", 
                                                             "LOOP", "NATIVE", 
                                                             "NOT", "NOTHING", 
                                                             "NULL", "OR", 
                                                             "RETURNS", 
                                                             "RETURN", "SET", 
                                                             "TAKES", "THEN", 
                                                             "TRUE", "TYPE", 
                                                             "COMMA", "EQ_EQ", 
                                                             "EQ", "NEQ", 
                                                             "LT_EQ", "LT", 
                                                             "GT_EQ", "GT", 
                                                             "PLUS", "MINUS", 
                                                             "MUL", "DIV", 
                                                             "LPAREN", "RPAREN", 
                                                             "LBRACK", "RBRACK", 
                                                             "ID", "INTVAL", 
                                                             "HEXVAL", "REALVAL", 
                                                             "WS", "NL", 
                                                             "LINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"RAWVAL", "STRING", "STRING_ESC", "STRING_CLOSE", "AND", "ARRAY", "CALL", 
		"CONSTANT", "DEBUG", "ELSE", "ELSEIF", "ENDFUNCTION", "ENDIF", "ENDLOOP", 
		"ENDGLOBALS", "EXTENDS", "EXITWHEN", "FALSE", "FUNCTION", "GLOBALS", "IF", 
		"LOCAL", "LOOP", "NATIVE", "NOT", "NOTHING", "NULL", "OR", "RETURNS", 
		"RETURN", "SET", "TAKES", "THEN", "TRUE", "TYPE", "COMMA", "EQ_EQ", "EQ", 
		"NEQ", "LT_EQ", "LT", "GT_EQ", "GT", "PLUS", "MINUS", "MUL", "DIV", "LPAREN", 
		"RPAREN", "LBRACK", "RBRACK", "ID", "HexDigit", "INTVAL", "HEXVAL", "REALVAL", 
		"WS", "NL", "LINE_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, JASS2Lexer._ATN, JASS2Lexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "JASS2.g4"; }

	public get literalNames(): (string | null)[] { return JASS2Lexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return JASS2Lexer.symbolicNames; }
	public get ruleNames(): string[] { return JASS2Lexer.ruleNames; }

	public get serializedATN(): number[] { return JASS2Lexer._serializedATN; }

	public get channelNames(): string[] { return JASS2Lexer.channelNames; }

	public get modeNames(): string[] { return JASS2Lexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,56,451,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,1,0,1,0,5,0,
	122,8,0,10,0,12,0,125,9,0,1,0,1,0,1,1,1,1,1,1,5,1,132,8,1,10,1,12,1,135,
	9,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
	1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
	12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
	1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
	19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
	1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,
	25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
	29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
	1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,
	36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,
	1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,
	49,1,49,1,50,1,50,1,51,1,51,5,51,382,8,51,10,51,12,51,385,9,51,1,52,1,52,
	1,53,4,53,390,8,53,11,53,12,53,391,1,54,1,54,1,54,3,54,397,8,54,1,54,4,
	54,400,8,54,11,54,12,54,401,1,55,5,55,405,8,55,10,55,12,55,408,9,55,1,55,
	1,55,4,55,412,8,55,11,55,12,55,413,1,55,4,55,417,8,55,11,55,12,55,418,1,
	55,1,55,5,55,423,8,55,10,55,12,55,426,9,55,3,55,428,8,55,1,56,4,56,431,
	8,56,11,56,12,56,432,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,
	5,58,445,8,58,10,58,12,58,448,9,58,1,58,1,58,0,0,59,1,1,3,2,5,0,7,0,9,3,
	11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,
	37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,
	61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,
	85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,50,105,0,107,
	51,109,52,111,53,113,54,115,55,117,56,1,0,8,1,0,39,39,2,0,34,34,92,92,3,
	0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,48,57,65,70,97,102,
	2,0,88,88,120,120,2,0,9,9,32,32,2,0,10,10,13,13,461,0,1,1,0,0,0,0,3,1,0,
	0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
	1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
	0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
	0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,107,1,0,0,0,0,
	109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,
	1,0,0,0,3,128,1,0,0,0,5,138,1,0,0,0,7,141,1,0,0,0,9,143,1,0,0,0,11,147,
	1,0,0,0,13,153,1,0,0,0,15,158,1,0,0,0,17,167,1,0,0,0,19,173,1,0,0,0,21,
	178,1,0,0,0,23,185,1,0,0,0,25,197,1,0,0,0,27,203,1,0,0,0,29,211,1,0,0,0,
	31,222,1,0,0,0,33,230,1,0,0,0,35,239,1,0,0,0,37,245,1,0,0,0,39,254,1,0,
	0,0,41,262,1,0,0,0,43,265,1,0,0,0,45,271,1,0,0,0,47,276,1,0,0,0,49,283,
	1,0,0,0,51,287,1,0,0,0,53,295,1,0,0,0,55,300,1,0,0,0,57,303,1,0,0,0,59,
	311,1,0,0,0,61,318,1,0,0,0,63,322,1,0,0,0,65,328,1,0,0,0,67,333,1,0,0,0,
	69,338,1,0,0,0,71,343,1,0,0,0,73,345,1,0,0,0,75,348,1,0,0,0,77,350,1,0,
	0,0,79,353,1,0,0,0,81,356,1,0,0,0,83,358,1,0,0,0,85,361,1,0,0,0,87,363,
	1,0,0,0,89,365,1,0,0,0,91,367,1,0,0,0,93,369,1,0,0,0,95,371,1,0,0,0,97,
	373,1,0,0,0,99,375,1,0,0,0,101,377,1,0,0,0,103,379,1,0,0,0,105,386,1,0,
	0,0,107,389,1,0,0,0,109,396,1,0,0,0,111,427,1,0,0,0,113,430,1,0,0,0,115,
	436,1,0,0,0,117,440,1,0,0,0,119,123,5,39,0,0,120,122,8,0,0,0,121,120,1,
	0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,
	123,1,0,0,0,126,127,5,39,0,0,127,2,1,0,0,0,128,133,5,34,0,0,129,132,3,5,
	2,0,130,132,3,7,3,0,131,129,1,0,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,
	131,1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,5,34,
	0,0,137,4,1,0,0,0,138,139,5,92,0,0,139,140,9,0,0,0,140,6,1,0,0,0,141,142,
	8,1,0,0,142,8,1,0,0,0,143,144,5,97,0,0,144,145,5,110,0,0,145,146,5,100,
	0,0,146,10,1,0,0,0,147,148,5,97,0,0,148,149,5,114,0,0,149,150,5,114,0,0,
	150,151,5,97,0,0,151,152,5,121,0,0,152,12,1,0,0,0,153,154,5,99,0,0,154,
	155,5,97,0,0,155,156,5,108,0,0,156,157,5,108,0,0,157,14,1,0,0,0,158,159,
	5,99,0,0,159,160,5,111,0,0,160,161,5,110,0,0,161,162,5,115,0,0,162,163,
	5,116,0,0,163,164,5,97,0,0,164,165,5,110,0,0,165,166,5,116,0,0,166,16,1,
	0,0,0,167,168,5,100,0,0,168,169,5,101,0,0,169,170,5,98,0,0,170,171,5,117,
	0,0,171,172,5,103,0,0,172,18,1,0,0,0,173,174,5,101,0,0,174,175,5,108,0,
	0,175,176,5,115,0,0,176,177,5,101,0,0,177,20,1,0,0,0,178,179,5,101,0,0,
	179,180,5,108,0,0,180,181,5,115,0,0,181,182,5,101,0,0,182,183,5,105,0,0,
	183,184,5,102,0,0,184,22,1,0,0,0,185,186,5,101,0,0,186,187,5,110,0,0,187,
	188,5,100,0,0,188,189,5,102,0,0,189,190,5,117,0,0,190,191,5,110,0,0,191,
	192,5,99,0,0,192,193,5,116,0,0,193,194,5,105,0,0,194,195,5,111,0,0,195,
	196,5,110,0,0,196,24,1,0,0,0,197,198,5,101,0,0,198,199,5,110,0,0,199,200,
	5,100,0,0,200,201,5,105,0,0,201,202,5,102,0,0,202,26,1,0,0,0,203,204,5,
	101,0,0,204,205,5,110,0,0,205,206,5,100,0,0,206,207,5,108,0,0,207,208,5,
	111,0,0,208,209,5,111,0,0,209,210,5,112,0,0,210,28,1,0,0,0,211,212,5,101,
	0,0,212,213,5,110,0,0,213,214,5,100,0,0,214,215,5,103,0,0,215,216,5,108,
	0,0,216,217,5,111,0,0,217,218,5,98,0,0,218,219,5,97,0,0,219,220,5,108,0,
	0,220,221,5,115,0,0,221,30,1,0,0,0,222,223,5,101,0,0,223,224,5,120,0,0,
	224,225,5,116,0,0,225,226,5,101,0,0,226,227,5,110,0,0,227,228,5,100,0,0,
	228,229,5,115,0,0,229,32,1,0,0,0,230,231,5,101,0,0,231,232,5,120,0,0,232,
	233,5,105,0,0,233,234,5,116,0,0,234,235,5,119,0,0,235,236,5,104,0,0,236,
	237,5,101,0,0,237,238,5,110,0,0,238,34,1,0,0,0,239,240,5,102,0,0,240,241,
	5,97,0,0,241,242,5,108,0,0,242,243,5,115,0,0,243,244,5,101,0,0,244,36,1,
	0,0,0,245,246,5,102,0,0,246,247,5,117,0,0,247,248,5,110,0,0,248,249,5,99,
	0,0,249,250,5,116,0,0,250,251,5,105,0,0,251,252,5,111,0,0,252,253,5,110,
	0,0,253,38,1,0,0,0,254,255,5,103,0,0,255,256,5,108,0,0,256,257,5,111,0,
	0,257,258,5,98,0,0,258,259,5,97,0,0,259,260,5,108,0,0,260,261,5,115,0,0,
	261,40,1,0,0,0,262,263,5,105,0,0,263,264,5,102,0,0,264,42,1,0,0,0,265,266,
	5,108,0,0,266,267,5,111,0,0,267,268,5,99,0,0,268,269,5,97,0,0,269,270,5,
	108,0,0,270,44,1,0,0,0,271,272,5,108,0,0,272,273,5,111,0,0,273,274,5,111,
	0,0,274,275,5,112,0,0,275,46,1,0,0,0,276,277,5,110,0,0,277,278,5,97,0,0,
	278,279,5,116,0,0,279,280,5,105,0,0,280,281,5,118,0,0,281,282,5,101,0,0,
	282,48,1,0,0,0,283,284,5,110,0,0,284,285,5,111,0,0,285,286,5,116,0,0,286,
	50,1,0,0,0,287,288,5,110,0,0,288,289,5,111,0,0,289,290,5,116,0,0,290,291,
	5,104,0,0,291,292,5,105,0,0,292,293,5,110,0,0,293,294,5,103,0,0,294,52,
	1,0,0,0,295,296,5,110,0,0,296,297,5,117,0,0,297,298,5,108,0,0,298,299,5,
	108,0,0,299,54,1,0,0,0,300,301,5,111,0,0,301,302,5,114,0,0,302,56,1,0,0,
	0,303,304,5,114,0,0,304,305,5,101,0,0,305,306,5,116,0,0,306,307,5,117,0,
	0,307,308,5,114,0,0,308,309,5,110,0,0,309,310,5,115,0,0,310,58,1,0,0,0,
	311,312,5,114,0,0,312,313,5,101,0,0,313,314,5,116,0,0,314,315,5,117,0,0,
	315,316,5,114,0,0,316,317,5,110,0,0,317,60,1,0,0,0,318,319,5,115,0,0,319,
	320,5,101,0,0,320,321,5,116,0,0,321,62,1,0,0,0,322,323,5,116,0,0,323,324,
	5,97,0,0,324,325,5,107,0,0,325,326,5,101,0,0,326,327,5,115,0,0,327,64,1,
	0,0,0,328,329,5,116,0,0,329,330,5,104,0,0,330,331,5,101,0,0,331,332,5,110,
	0,0,332,66,1,0,0,0,333,334,5,116,0,0,334,335,5,114,0,0,335,336,5,117,0,
	0,336,337,5,101,0,0,337,68,1,0,0,0,338,339,5,116,0,0,339,340,5,121,0,0,
	340,341,5,112,0,0,341,342,5,101,0,0,342,70,1,0,0,0,343,344,5,44,0,0,344,
	72,1,0,0,0,345,346,5,61,0,0,346,347,5,61,0,0,347,74,1,0,0,0,348,349,5,61,
	0,0,349,76,1,0,0,0,350,351,5,33,0,0,351,352,5,61,0,0,352,78,1,0,0,0,353,
	354,5,60,0,0,354,355,5,61,0,0,355,80,1,0,0,0,356,357,5,60,0,0,357,82,1,
	0,0,0,358,359,5,62,0,0,359,360,5,61,0,0,360,84,1,0,0,0,361,362,5,62,0,0,
	362,86,1,0,0,0,363,364,5,43,0,0,364,88,1,0,0,0,365,366,5,45,0,0,366,90,
	1,0,0,0,367,368,5,42,0,0,368,92,1,0,0,0,369,370,5,47,0,0,370,94,1,0,0,0,
	371,372,5,40,0,0,372,96,1,0,0,0,373,374,5,41,0,0,374,98,1,0,0,0,375,376,
	5,91,0,0,376,100,1,0,0,0,377,378,5,93,0,0,378,102,1,0,0,0,379,383,7,2,0,
	0,380,382,7,3,0,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,
	1,0,0,0,384,104,1,0,0,0,385,383,1,0,0,0,386,387,7,4,0,0,387,106,1,0,0,0,
	388,390,2,48,57,0,389,388,1,0,0,0,390,391,1,0,0,0,391,389,1,0,0,0,391,392,
	1,0,0,0,392,108,1,0,0,0,393,394,5,48,0,0,394,397,7,5,0,0,395,397,5,36,0,
	0,396,393,1,0,0,0,396,395,1,0,0,0,397,399,1,0,0,0,398,400,3,105,52,0,399,
	398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,110,1,0,
	0,0,403,405,2,48,57,0,404,403,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,
	407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,411,5,46,0,0,410,412,2,
	48,57,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,
	414,428,1,0,0,0,415,417,2,48,57,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,
	1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,424,5,46,0,0,421,423,2,48,57,
	0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,428,
	1,0,0,0,426,424,1,0,0,0,427,406,1,0,0,0,427,416,1,0,0,0,428,112,1,0,0,0,
	429,431,7,6,0,0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,
	1,0,0,0,433,434,1,0,0,0,434,435,6,56,0,0,435,114,1,0,0,0,436,437,7,7,0,
	0,437,438,1,0,0,0,438,439,6,57,0,0,439,116,1,0,0,0,440,441,5,47,0,0,441,
	442,5,47,0,0,442,446,1,0,0,0,443,445,8,7,0,0,444,443,1,0,0,0,445,448,1,
	0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,
	450,6,58,1,0,450,118,1,0,0,0,15,0,123,131,133,383,391,396,401,406,413,418,
	424,427,432,446,2,6,0,0,0,2,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JASS2Lexer.__ATN) {
			JASS2Lexer.__ATN = new ATNDeserializer().deserialize(JASS2Lexer._serializedATN);
		}

		return JASS2Lexer.__ATN;
	}


	static DecisionsToDFA = JASS2Lexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}